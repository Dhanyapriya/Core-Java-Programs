class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    int height;

    TreeNode(int x) {
        val = x;
        height = 1;
    }
}

public class Main {
    TreeNode root;

    public Main() {
        root = null;
    }

   
    private int height(TreeNode node) {
        if (node == null) {
            return 0;
        }
        return node.height;
    }

 
    private int balanceFactor(TreeNode node) {
        if (node == null) {
            return 0;
        }
        return height(node.left) - height(node.right);
    }

    
    private TreeNode rightRotate(TreeNode y) {
        TreeNode x = y.left;
        TreeNode T2 = x.right;

        x.right = y;
        y.left = T2;

     
        y.height = Math.max(height(y.left), height(y.right)) + 1;
        x.height = Math.max(height(x.left), height(x.right)) + 1;

       
        return x;
    }

    private TreeNode leftRotate(TreeNode x) {
        TreeNode y = x.right;
        TreeNode T2 = y.left;

       
        y.left = x;
        x.right = T2;

      
        x.height = Math.max(height(x.left), height(x.right)) + 1;
        y.height = Math.max(height(y.left), height(y.right)) + 1;

        
        return y;
    }

    public TreeNode insert(TreeNode node, int val) {
        if (node == null) {
            return new TreeNode(val);
        }

        if (val < node.val) {
            node.left = insert(node.left, val);
        } else if (val > node.val) {
            node.right = insert(node.right, val);
        } else { // Duplicate keys not allowed
            return node;
        }

        node.height = 1 + Math.max(height(node.left), height(node.right));

        
        int balance = balanceFactor(node);

        // Left Left Case
        if (balance > 1 && val < node.left.val) {
            return rightRotate(node);
        }

        // Right Right Case
        if (balance < -1 && val > node.right.val) {
            return leftRotate(node);
        }

        // Left Right Case
        if (balance > 1 && val > node.left.val) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }

        // Right Left Case
        if (balance < -1 && val < node.right.val) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }

        // Node is balanced
        return node;
    }


    private TreeNode minValueNode(TreeNode node) {
        TreeNode current = node;
        while (current.left != null) {
            current = current.left;
        }
        return current;
    }

  
    public TreeNode delete(TreeNode root, int val) {
        if (root == null) {
            return root;
        }

        if (val < root.val) {
            root.left = delete(root.left, val);
        } else if (val > root.val) {
            root.right = delete(root.right, val);
        } else {
            // Node with only one child or no child
            if ((root.left == null) || (root.right == null)) {
                TreeNode temp = null;
                if (temp == root.left) {
                    temp = root.right;
                } else {
                    temp = root.left;
                }

                // No child case
                if (temp == null) {
                    temp = root;
                    root = null;
                } else { 
                    root = temp;
                }
            } else {
              
                TreeNode temp = minValueNode(root.right);

                root.val = temp.val;

                root.right = delete(root.right, temp.val);
            }
        }

        if (root == null) {
            return root;
        }

        root.height = Math.max(height(root.left), height(root.right)) + 1;

       
         int balance = balanceFactor(root);

        // Left Left Case
        if (balance > 1 && balanceFactor(root.left) >= 0) {
            return rightRotate(root);
        }

        // Left Right Case
        if (balance > 1 && balanceFactor(root.left) < 0) {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }

       // Right Right Case
        if (balance < -1 && balanceFactor(root.right) <= 0) {
            return leftRotate(root);
        }

        // Right Left Case
        if (balance < -1 && balanceFactor(root.right) > 0) {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }

        return root;
    }

   
    // public boolean search(TreeNode root, int val) {
    //     if (root == null) {
    //         return false;
    //     }

    //     if (root.val == val) {
    //         return true;
    //     }

    //     if (val < root.val) {
    //         return search(root.left, val);
    //     } else {
    //         return search(root.right, val);
    //     }
    // }

    public void inorderTraversal(TreeNode node) {
        if (node != null) {
            inorderTraversal(node.left);
            System.out.print(node.val + " ");
            inorderTraversal(node.right);
        }
    }

    public static void main(String[] args) {
        Main tree = new Main();

        tree.root = tree.insert(tree.root, 3);
        tree.root = tree.insert(tree.root, 4);
        tree.root = tree.insert(tree.root, 5);
        // tree.root = tree.insert(tree.root, 0);
        // tree.root = tree.insert(tree.root, 6);
        // tree.root = tree.insert(tree.root, 11);
        // tree.root = tree.insert(tree.root, -1);
        // tree.root = tree.insert(tree.root, 1);
        // tree.root = tree.insert(tree.root, 2);

        System.out.println("In-order traversal of constructed AVL tree:");
        tree.inorderTraversal(tree.root);
        System.out.println();

      
         int key = 6;
         System.out.println("Search for " + key + " ");
}
}