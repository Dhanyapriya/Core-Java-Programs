class Node {
    int data;
    Node left,right;
    Node(int data){
        this.data=data;
        left=right=null;
    }
}
class BinarySearchTree{
    Node root;
    BinarySearchTree(){
        root=null;
    }
    void insert(int data){
        root=insertRec(root,data);
    }
    Node insertRec(Node root,int data){
        if(root==null){
            root=new Node(data);
            return root;
        }
        if(data<root.data){
            root.left=insertRec(root.left,data);
        }
        else if(data>root.data){
            root.right=insertRec(root.right,data);
        }
        return root; 
    }
    public boolean search(int data) {
        return searchRec(root, data);
    }

    private boolean searchRec(Node root, int data) {
        if (root == null) {
            return false;
        }

        if (data == root.data) {
            return true;
        } else if (data < root.data) {
            return searchRec(root.left, data);
        } else {
            return searchRec(root.right, data);
        }
    }

    public void delete(int data) {
        root = deleteRec(root, data);
    }

    private Node deleteRec(Node root, int data) {
        if (root == null) {
            return root;
        }

        if (data < root.data) {
            root.left = deleteRec(root.left, data);
        } else if (data > root.data) {
            root.right = deleteRec(root.right, data);
        } else {
            if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            }

            root.data = minValue(root.right);
            root.right = deleteRec(root.right, root.data);
        }

        return root;
    }

    private int minValue(Node root) {
        int minValue = root.data;
        while (root.left != null) {
            minValue = root.left.data;
            root = root.left;
        }
        return minValue;
    }

    void inorder(){
        inorderRec(root);
    }
    void inorderRec(Node root){
        if(root!=null){
            inorderRec(root.left);
            System.out.print(root.data+" ");
            inorderRec(root.right);
        }
    }
}
public class Main{
    public static void main(String[] args){
        BinarySearchTree b=new BinarySearchTree();
        b.insert(50);
        b.insert(20);
        b.insert(60);
        b.insert(10);
        b.insert(5);
        b.insert(15);
        b.insert(50);
         System.out.println("In-order traversal of the BST:");
        b.inorder();

        System.out.println("Searching for 40 in the BST:");
        System.out.println(b.search(40) ? "Found" : "Not found");

        System.out.println("Deleting 20 from the BST:");
        b.delete(20);
        b.inorder();

        System.out.println("Deleting 30 from the BST:");
        b.delete(60);
        b.inorder();

        System.out.println("Deleting 50 from the BST:");
        b.delete(5);
        b.inorder();
    }
}